
/**
 @Function Number:2
 @author:
 @example:
 @description: 
 @param: 
 @return: 
 **/

function modifyMetricinAdminListing($inputObject)
{
	_log("modifyMetricinAdminListing Started","success");
	try 
	{
		_click(_link($inputObject.item));
		setAllFields($inputObject);
		_click(_submit("QTP_KEY_BUTTON_Save1"));
		verify_modifyMetricinAdminListing($inputObject);
		
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("modifyMetricinAdminListing Completed","success");
}

/**
 @Function Number:4
 @author:
 @example:
 @description: 
 @param: 
 @return: 
 **/

function verify_modifyMetricinAdminListing($inputObject)
{
	_log("verify_modifyMetricinAdminListing Started","success");
	try 
	{		
		_click(_link($inputObject.item));
		verifyAllFields($inputObject);
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("verify_modifyMetricinAdminListing Completed","success");
}

/*************************************************************************
* @author Vaishali
* @example addmetric({ "edt_metricname" : "org_metric" ,  "lst_appupto" : "Organization" ,  "lst_uom" : "FP"});
* @description This function is called to add matrics
* @param {String} edt_metricname,lst_appupto,lst_uom
* @return {String}   None 
*************************************************************************/

function addmetric($inputObject)
{
	_log("addmetric Started","success");
	try 
	{
		if($inputObject.operation === "Negative")
		{
		
			_click(_link("de-icon-add"));
			var $metricname = $inputObject.edt_metricname;
			var $errormsg = "There seems to be an error : Metric Name Already Exists -";
			var $msg = $errormsg + " " +$metricname;
			setAllFields($inputObject);	
			_click(_submit("QTP_KEY_BUTTON_Save1"));
			_assertExists(_cell($msg));
			_click(_submit("Back To Previous Page"));	
			
		}
		else if($inputObject.operation === "CatChkNegative")
		{
			_click(_link("de-icon-add"));
			_assertNotContainsText($inputObject.lst_category, _select("category"));
		}
		else
		{
			CreateInstance($inputObject);
			$inputObject.item = $inputObject.edt_metricname;
			verifymetricinlisting($inputObject);
		}		
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("addmetric Completed","success");
}

/**
 @Function Number:	6
 @author:			Vaishali	
 @example:			addmetricfromChildOrg($inputObject)	
 @description: 		This function adds metrics from child org.
 @param: 			item
 @return: 			none
 **/

function addmetricfromChildOrg($inputObject)
{
	_log("addmetricfromChildOrg Started","success");
	try 
	{		 
		 _click(_link("de-icon-add_metric_childorg"));
		 _selectWindow("popup");
		 _click(_checkbox(0,_near(_cell($inputObject.item))));
		 _click(_submit("Add"));
		 _selectWindow();
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("addmetricfromChildOrg Completed","success");
}

/**
 @Function Number:	8
 @author:			Vaishali	
 @example:			navigatetometricgoalsheetinpopup()
 @description: 		This function click on image metric goal sheet
 @param: 
 @return: 
 **/

function navigatetometricgoalsheetinpopup($inputObject)
{
	_log("navigatetometricgoalsheetinpopup Started","success");
	try 
	{	
		_selectWindow($inputObject.popup_name);
		_click(_link("de-icon-view_icon"));
		_selectWindow();
		
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("navigatetometricgoalsheetinpopup Completed","success");
}

/*************************************************************************
* @author Vaishali
* @example deletemetric({ "item" : "Process chemical consumption" ,  "col_id" : "2" });
* @description This function is called to delete metrics
* @param {String} None
* @return {String}   None 
*************************************************************************/

function deletemetric($inputObject)
{
	_log("deletemetric Started","success");
	try 
	{
		_click(_link($inputObject.item));
		_click(_submit("Delete"));
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("deletemetric Completed","success");
}

/**
 @Function Number:	13
 @author:  			Vaishali	
 @example:			verifymetricinlisting($inputObject)
 @description: 		This function verify metric in listing
 @param: 			metric name to be verify
 @return: 
 **/

function verifymetricinlisting($inputObject)
{
	_log("verifymetricinlisting Started","success");
	try 
	{
		if($inputObject.operation === "Delete")
			_assertFalse(_isVisible(_link($inputObject.item)));
		else
			_assertTrue(_isVisible(_link($inputObject.item)));
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("verifymetricinlisting Completed","success");
}

/**
 @Function Number:14
 @author: rmahant
 @example:
 @description: 
 @param: 
 @return: 
 **/

function verifymetriccount($inputObject)
{
	_log("verifymetriccount Started","success");
	try 
	{
		if($inputObject.count === "0")
		{
			_assertTrue(_exists(_span("No Records Found",_in(_table("List")))));
		}	
		else
		{
			var $expectedCount;
			_set($expectedCount,_table("List").rows.length);
			_assertEqual($expectedCount, $inputObject.count+1, "Metric count matches");
		}
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("verifymetriccount Completed","success");
}

/*************************************************************************
* @author Vaishali
* @example verifymetricinmetricgoalsheet({ "item" : "Hazardous waste generation" });
* @description This function is verifying delete Existing metrics item
* @param {String} Metrics name to be verify item
* @return {String}   None 
*************************************************************************/

function verifymetricinmetricgoalsheet($inputObject)
{
	_log("verifymetricinmetricgoalsheet Started","success");
	try 
	{
		_selectWindow("popup");
		_assertFalse(_isVisible(_cell($inputObject.item)));
		_selectWindow();
	}
	catch(e)
	{
		handleFailure(e);
	}
	_log("verifymetricinmetricgoalsheet Completed","success");
}